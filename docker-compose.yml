services:
   front:
     build: ./front
     ports: 
      - "5173:5173"
     volumes:
      - ./front/src:/app/front/src
     env_file: .env
      # Services line define which Docker images to run. In this case, it will be MySQL server and WordPress image.
     depends_on: 
      - wordpress
   db:
    image: mysql:latest
    # image: mysql:9.0.0 indicates the MySQL database container image from Docker Hub used in this installation.
    restart: always
    volumes:
     - my-db-volume:/var/lib/mysql   #named volume so data persists across container shut down
     - ./dump.sql:/docker-entrypoint-initdb.d/dump.sql   #pulls in the database the first time to the image?
    env_file: .env
   phpmyadmin:
    depends_on:
      - db
    image: phpmyadmin/phpmyadmin:latest
    restart: always
    env_file: .env
    environment:
      PMA_HOST: db
      PMA_USER: ${MYSQL_USER}
      PMA_PASSWORD: ${MYSQL_PASSWORD}
    ports:
      - "8080:80"
   wordpress:
    depends_on:
      - db
      - phpmyadmin
    image: wordpress:latest
    restart: always
    # Restart line controls the restart mode, meaning if the container stops running for any reason, it will restart the process immediately.
    ports:
      - "8000:80"
      # The previous line defines the port that the WordPress container will use. After successful installation, the full path will look like this: http://localhost:8000
    env_file: .env
    environment:
      WORDPRESS_DB_HOST: db:3306
      WORDPRESS_DB_USER: ${MYSQL_USER}
      WORDPRESS_DB_PASSWORD: ${MYSQL_PASSWORD}
      WORDPRESS_DB_NAME: MyWordPressDatabaseName
# Similar to MySQL image variables, the last four lines define the main variables needed for the WordPress container to work properly with the MySQL container.
    volumes:
      - ./wp/wp-content:/var/www/html/wp-content
   json-server:
    image: clue/json-server
    command: --watch /data/db.json --host 0.0.0.0
    ports:
      - "3000:80"
    volumes:
      - ./data:/data
   test:
    container_name: react-app-test
    build: ./front
    volumes:
     - ./front/src:/app/front/src
     - ./front/tests:/app/front/tests
    command: npm test
    ports:
     - '51204:51204'
    stdin_open: true 
    tty: true
   storybook:
    container_name: storybook
    build: ./front
    volumes:
     - ./front/src:/app/front/src
    command: npm run storybook
    ports:
     - '6006:6006'
    stdin_open: true 
    tty: true
    environment:
      - CHOKIDAR_USEPOLLING =true
    
volumes:
  my-db-volume:
     

   